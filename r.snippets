snippet trace
	v = c(${1:variables})
	bayesplot::color_scheme_set("viridisC")
	pars = function(...) get_pars(fit\$summary(), c(...))\$variable
	bayesplot::mcmc_trace(fit\$draws(inc_warmup = TRUE)[,,],
	                      pars= c(pars("lp__"), v),
	                      n_warmup = fit\$metadata()\$iter_warmup )

snippet cmdmodel
	# Fit model
	write_init_files = function(dir="init", chains=1:4) {
	    sapply( chains, function(chain) {
	        init = tibble::lst(
	            sc_D  = 1, 
	            D     = rlnorm(nw, 0, sc_D),
	            delta = rnorm(nw),
	            DIF   = rnorm(nw),
	            theta = rnorm(ns, -1.645720, 5)
	        )
	        dir.create(dir, showWarnings = F)
	        fp = file.path(dir, paste0(chain,".json") )
	        cmdstanr::write_stan_json(init, fp)
	        fp
	    })
	}
	set.seed(50)
	m = cmdstanr::cmdstan_model("src/m_DIF.stan")
	fit = m\$sample(data = dat, chains = 4, parallel_chains = 4,
	               iter_warmup = 800, iter_sampling = 500,
	               save_warmup = TRUE, refresh = 200,
	               init = write_init_files())
	fit\$save_object("made/m_DIF.RDS")

snippet validate_model
	v = "${1:parameter}"
	est = precis(fit, pars=v, depth=3)
	true = dat[[v]]
	plot(true, est$mean, ylim=range(est$q5, est$q95))
	abline(0,1, lty="dashed")
	for (i in 1:length(true)) {
	    points(true[i], est$mean[i], col=2, pch=19)
	    x_ = rep(true[i], 2)
	    y_ = c(est$q5[i], est$q95[i])
	    lines(x_, y_, col=stom::col.alpha(2), lwd=2)
	}



snippet lib
	library(${1:package})

snippet req
	require(${1:package})

snippet src
	source("${1:file.R}")

snippet ret
	return(${1:code})

snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

snippet sg
	setGeneric("${1:generic}", function(${2:x, ...}) {
		standardGeneric("${1:generic}")
	})

snippet sm
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
		${0}
	})

snippet sc
	setClass("${1:Class}", slots = c(${2:name = "type"}))

snippet if
	if (${1:condition}) {
		${0}
	}

snippet el
	else {
		${0}
	}

snippet ei
	else if (${1:condition}) {
		${0}
	}

snippet fun
	${1:name} <- function(${2:variables}) {
		${0}
	}

snippet for
	for (${1:variable} in ${2:vector}) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch (${1:object},
		${2:case} = ${3:action}
	)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})

snippet lapply
	lapply(${1:list}, ${2:function})

snippet sapply
	sapply(${1:list}, ${2:function})

snippet mapply
	mapply(${1:function}, ${2:...})

snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})

snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})

snippet rapply
	rapply(${1:list}, ${2:function})

snippet ts
	`r paste("#", date(), "------------------------------\n")`

snippet shinyapp
	library(shiny)
	
	ui <- fluidPage(
	  ${0}
	)
	
	server <- function(input, output, session) {
	  
	}
	
	shinyApp(ui, server)

snippet shinymod
	${1:name}UI <- function(id) {
	  ns <- NS(id)
	  tagList(
		${0}
	  )
	}
	
	${1:name}Server <- function(id) {
	  moduleServer(
	    id,
	    function(input, output, session) {
	      
	    }
	  )
	}

